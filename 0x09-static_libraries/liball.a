!<arch>
0-isupper.c/    0           0     0     644     250       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: The character to be checked
 * Return: 1 if c is uppercase, O otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}

	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     626       `
#include "main.h"
#include <string.h>

/**
 * _memset - fills memory with a constant byte.
 * @s: Pointer to the memory arae to be filled.
 * @b: The constant byte value to be filled.
 * @n: Number of bytes to fill.
 *
 * This function fills the first 'n' bytes of the memory area pointed to by 's'
 * with the constant byte 'b'. It returns a pointer to the memory area 's'.
 * Return:
 * A pointer to the memory area 's'
 * after it has been filled with the constant byte 'b'.
 */

char *_memset(char *s, char b, unsigned int n)
{
	char *original_s = s;

	while (n > 0)
	{
		*s = b;
		s++;
		n--;
	}

	return (original_s);
}
0-strcat.c/     0           0     0     644     488       `
#include "main.h"
#include <string.h>

/**
 * _strcat -function that concatenates two strings
 * @dest: destination string
 * @src: source string
 * Return: pointer to the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	int dest_length = strlen(dest);
	int i;


	/* Find the end of the destination string */
	for (i = 0; src[i] != '\0'; i++)
	{
		dest[dest_length + i] = src[i];
	}

	dest[dest_length + i] = '\0'; /* Add the terminating null byte */

	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     252       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: The character to be checked
 * Return: 1 if c is digit,0 otherwise
 */

int _isdigit(int c)

{

	if (c >= '0' && c <= '9')

	{
		return (1);
	}

	else

	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     638       `
#include "main.h"
#include <string.h>

/**
 * _memcpy - copies memory area.
 * @dest: Pointer to the destination memory area.
 * @src: Pointer to the source memory area.
 * @n: Number of bytes to copy.
 *
 * Description:
 * This function copies 'n' bytes from the memory area pointed to by 'src'
 * to the memory area pointed to by 'dest'. The memory areas must not overlap.
 * Return: returns a pointer to the destination memory area.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *original_dest = dest;

	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*dest = *src;
		dest++;
		src++;
	}

	return (original_dest);
}
1-strncat.c/    0           0     0     644     458       `
#include "main.h"
#include <string.h>

/**
 * _strncat - concatenates two strings.
 * @dest: destination string
 * @src: source string
 * @n: maximu number of bytes to copy from src
 * Return: pointer to the resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int dest_length = strlen(dest);
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[dest_length + i] = src[i];
	}

	dest[dest_length + i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     456       `
#include "main.h"
#include <string.h>

/**
 * _strchr -  that locates a character in a string.i
 * @s: The string to search in.
 * @c: The character to locate.
 *
 * Return: Returns a pointer to the first occurrence of the character c
 * in the string s, or NULL if the character is not found
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}

	if (*s == c)
	{
		return (s);
	}

	return (NULL);
}
2-strlen.c/     0           0     0     644     244       `
#include "main.h"

/**
 *  _strlen - returns the length of a string
 * @s: string variable
 * Return: (length) - outputs the result
 */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}

	return (length);
}
2-strncpy.c/    0           0     0     644     583       `
#include "main.h"
#include <string.h>

/**
 * _strncpy - Copies a string, up to n characters.
 * @dest: The destination string.
 * @src: The source string to be copied.
 * @n: The maximum number of characters to copy.
 * Return: A pointer to the resulting string @dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	/* Copy characters from src to dest, upto n characters */
	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	/* Fill any remaining space in dest with null character */
	for (; i < n; i++)
	{
		dest[i] = '\0';
	}

	return (dest);
}

3-islower.c/    0           0     0     644     235       `
#include "main.h"

/**
 * _islower - check if char is lowercase
 * @c: is the char to be checked
 * Return: 1 if char is lowercase, otherwise 0.
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     250       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - prints a string, followed by a new line, to stdout.
 * @str: The input string to be printed.
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar (*str);
		str++;
	}
	_putchar ('\n');
}
3-strcmp.c/     0           0     0     644     470       `
#include "main.h"
#include <string.h>

/**
 *  _strcmp -  function that compares two strings.
 * @s1: The first string to compare.
 * @s2: The second string to compare.
 * Return: An integer less than, equal to, or greater than zero if s1 is
 * less than, equal to, or greater than s2, respectively.
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 != '\0' && *s2 != '\0')
	{
		if (*s1 != *s2)
		{
			return (*s1 - *s2);
		}
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     777       `
#include "main.h"
#include <string.h>

/**
 * _strspn - gets the length of a prefix substring.
 * @s: The input string to be checked.
 * @accept: The string containing acceptable characters.
 *
 * This function calculates the length of the initial segment of
 * the string 's' that consists only of characters from the 'accept'
 * string. It iterates through the 's' string and stops when a character
 * not found in the 'accept' string is encountered or when the end of
 * the 's' string is reached.
 *
 * Return: The number of bytes in the initial segment of 's' which
 * consist only of bytes from 'accept'.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int length = 0;

	while (*s && strchr(accept, *s) != NULL)
	{
		length++;
		s++;
	}

	return (length);
}

4-isalpha.c/    0           0     0     644     238       `
#include "main.h"

/**
 * _isalpha - checks for an alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     640       `
#include "main.h"
#include <string.h>

/**
 * _strpbrk -  searches a string for any of a set of bytes.
 * Description:
 * The _strpbrk() function locates the first occurrence in the string s
 * of any of the bytes in the string accept.
 *
 * @s: The string to search.
 * @accept: The set of bytes to search for.
 *
 * Return: Returns a pointer to the byte in s that matches one of the bytes
 * in accept, or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	while (*s != '\0')
	{
		char *ch = accept;

		while (*ch != '\0')
		{
			if (*s == *ch)
			{
				return (s);
			}
			ch++;
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     712       `
#include "main.h"
#include <string.h>

/**
 * _strstr - locates a substring
 * @haystack: The string in which to search.
 * @needle: The substring to find.
 *
 * Description: The _strstr() function finds the first occurrence of the
 * substring needle in the string haystack.
 * The terminating null bytes (\0) are not compared
 *
 * Return: Returns a pointer to the beginning of the located substring,
 * or NULL if the substring is not found.
 */

char *_strstr(char *haystack, char *needle)
{
	while (*haystack != '\0')
	{
		char *h = haystack;
		char *n = needle;

		while (*n != '\0' && *h == *n)
		{
			h++;
			n++;
		}

		if (*n == '\0')
		{
			return (haystack);
		}

		haystack++;
	}

	return (NULL);
}
6-abs.c/        0           0     0     644     204       `
#include "main.h"

/**
 * _abs - computes the absolute value of integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     341       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int x = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for ( ; x < l ; x++)
	{
		dest[x] = src[x];
	}
	dest[l] = '\0';
	return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     264       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
